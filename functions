#!/usr/bin/env bash
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/config"
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/common-functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_AVAILABLE_PATH/config/functions"
if [[ -f "$PLUGIN_AVAILABLE_PATH/docker-options/functions" ]]; then
  source "$PLUGIN_AVAILABLE_PATH/docker-options/functions"
fi

is_valid_service_name() {
  declare desc="validate a service name"
  declare SERVICE="$1"
  [[ -z "$SERVICE" ]] && return 1

  if [[ "$SERVICE" =~ ^[A-Za-z0-9_-]+$ ]]; then
    return 0
  fi

  return 1
}

service_create_container() {
  local SERVICE="$1"
  local ACCESS_KEY="$2"
  local SECRET_KEY="$3"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_HOST_ROOT="$PLUGIN_DATA_HOST_ROOT/$SERVICE"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  local ACCESS_KEY="$(service_access_key "$SERVICE")"
  local SECRET_KEY="$(service_secret_key "$SERVICE")"
  local ROOT_USER="$(service_root_user "$SERVICE")"
  local ROOT_PASSWORD="$(service_root_password "$SERVICE")"

  local DATABASE_NAME="$(get_database_name "$SERVICE")"
  local PREVIOUS_ID

  if [[ -f "$SERVICE_ROOT/CONFIG_OPTIONS" ]]; then
    export CONFIG_OPTIONS="$(cat "$SERVICE_ROOT/CONFIG_OPTIONS")"
  fi

  [[ -f "$SERVICE_ROOT/SERVICE_MEMORY" ]] && SERVICE_MEMORY="$(cat "$SERVICE_ROOT/SERVICE_MEMORY")"
  if [[ -n "$SERVICE_MEMORY" ]]; then
    MEMORY_LIMIT="--memory=${SERVICE_MEMORY}m"
  fi

  [[ -f "$SERVICE_ROOT/SHM_SIZE" ]] && SERVICE_SHM_SIZE="$(cat "$SERVICE_ROOT/SHM_SIZE")"
  if [[ -n "$SERVICE_SHM_SIZE" ]]; then
    SHM_SIZE="--shm-size=${SERVICE_SHM_SIZE}"
  fi

  [[ -f "$SERVICE_ROOT/IMAGE" ]] && PLUGIN_IMAGE="$(cat "$SERVICE_ROOT/IMAGE")"
  [[ -f "$SERVICE_ROOT/IMAGE_VERSION" ]] && PLUGIN_IMAGE_VERSION="$(cat "$SERVICE_ROOT/IMAGE_VERSION")"

  # shellcheck disable=SC2086
  ID=$(docker run --name "$SERVICE_NAME" \
    $MEMORY_LIMIT $SHM_SIZE \
    -v "$SERVICE_HOST_ROOT/data:/var/lib/minio/data" \
    -e "MINIO_ROOT_USER=$MINIO_ROOT_USER" \
    -e "MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD" \
    --env-file="$SERVICE_ROOT/ENV" \
    -d --restart always \
    --label dokku=service \
    --label dokku.service=minio \
    "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION" \
    $CONFIG_OPTIONS \
    server /var/lib/minio/data --console-address "127.0.0.1:9090")
  echo "$ID" >"$SERVICE_ROOT/ID"

  dokku_log_verbose_quiet "Waiting for container to be ready"
  docker run --rm --link "$SERVICE_NAME:$PLUGIN_COMMAND_PREFIX" "$PLUGIN_WAIT_IMAGE" -p "$PLUGIN_DATASTORE_WAIT_PORT" >/dev/null

  dokku_log_verbose_quiet "Setting up users"
  docker run --rm --link "$SERVICE_NAME:$PLUGIN_COMMAND_PREFIX" "$PLUGIN_MINIO_CLIENT_IMAGE" mc admin user add local $ACCESS_KEY $SECRET_KEY >/dev/null

  dokku_log_verbose_quiet "Securing connection to database"
#   service_stop "$SERVICE" >/dev/null
#   docker run --rm -i -v "$SERVICE_HOST_ROOT/data:/var/lib/minio/data" "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION" bash -s <"$(cd "$(dirname "${BASH_SOURCE[0]}") && pwd)/scripts/enable_ssl.sh" &>/dev/null

#   PREVIOUS_ID=$(docker ps -aq --no-trunc --filter "status=exited" --filter "name=^/$SERVICE_NAME$" --format '{{ .ID }}') || true
#   docker start "$PREVIOUS_ID" >/dev/null
#   service_port_unpause "$SERVICE"

  dokku_log_info2 "$PLUGIN_SERVICE container created: $SERVICE"
  service_info "$SERVICE"
}

service_create() {
  local SERVICE="$1"
  is_valid_service_name "$SERVICE" || dokku_log_fail "Please specify a valid name for the service. Valid characters are: [A-Za-z0-9_]+"
  [[ -z "$SERVICE" ]] && dokku_log_fail "Please specify a valid name for the service"
  [[ ! -d "$PLUGIN_DATA_ROOT/$SERVICE" ]] || dokku_log_fail "$PLUGIN_SERVICE service $SERVICE already exists"
  SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  LINKS_FILE="$SERVICE_ROOT/LINKS"

  service_parse_args "${@:2}"

  if ! service_image_exists "$SERVICE"; then
    if [[ "$PLUGIN_DISABLE_PULL" == "true" ]]; then
      dokku_log_warn "${PLUGIN_DISABLE_PULL_VARIABLE} environment variable detected. Not running pull command." 1>&2
      dokku_log_warn "   docker pull ${IMAGE}" 1>&2
      dokku_log_warn "$PLUGIN_SERVICE service creation failed"
      exit 1
    fi
    docker pull "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION" || dokku_log_fail "$PLUGIN_SERVICE image $PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION pull failed"
  fi

  plugn trigger service-action pre-create "$PLUGIN_COMMAND_PREFIX" "$SERVICE"
  mkdir -p "$SERVICE_ROOT" || dokku_log_fail "Unable to create service directory"
  mkdir -p "$SERVICE_ROOT/data" || dokku_log_fail "Unable to create service data directory"
  touch "$LINKS_FILE"

  
  SECRET_KEY=$(openssl rand -hex 16)
  ACCESS_KEY=$(openssl rand -hex 16)
  if [[ -n "$SERVICE_ACCESS_KEY" ]]; then
    ACCESS_KEY="$ACCESS_KEY"
    dokku_log_warn "Specified password may not be as secure as the auto-generated password"
  fi
  if [[ -n "$SERVICE_SECRET_KEY" ]]; then
    SECRET_KEY="$SERVICE_SECRET_KEY"
    dokku_log_warn "Specified password may not be as secure as the auto-generated password"
  fi

  echo "$ACCESS_KEY" >"$SERVICE_ROOT/ACCESS_KEY"
  chmod 640 "$SERVICE_ROOT/ACCESS_KEY"
  echo "$SECRET_KEY" >"$SERVICE_ROOT/SECRET_KEY"
  chmod 640 "$SERVICE_ROOT/SECRET_KEY"

  service_commit_config "$SERVICE"
  write_database_name "$SERVICE"
  plugn trigger service-action post-create "$PLUGIN_COMMAND_PREFIX" "$SERVICE"
  service_create_container "$SERVICE" "$ACCESS_KEY" "$SECRET_KEY"
  plugn trigger service-action post-create-complete "$PLUGIN_COMMAND_PREFIX" "$SERVICE"
}